<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【Leetcode】第199场周赛</title>
    <url>/2020/07/28/%E3%80%90Leetcode%E3%80%91%E7%AC%AC199%E5%9C%BA%E5%91%A8%E8%B5%9B/</url>
    <content><![CDATA[<h2 id="A-重新排列字符串"><a href="#A-重新排列字符串" class="headerlink" title="A.重新排列字符串"></a>A.<a href="https://leetcode-cn.com/problems/shuffle-string/">重新排列字符串</a></h2><p><font size=4><strong>解题思路：</strong></font><br>开个新数组或者map存储对应序号的字符，然后按序输出。<br><font size=4><strong>代码展示：</strong></font></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">restoreString</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; indices)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</span><br><span class="line">            q[indices[i]]=s[i];</span><br><span class="line">        <span class="built_in">string</span> ans=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</span><br><span class="line">            ans+=q[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="B-灯泡开关-IV"><a href="#B-灯泡开关-IV" class="headerlink" title="B.灯泡开关 IV"></a>B.<a href="https://leetcode-cn.com/problems/bulb-switcher-iv/">灯泡开关 IV</a></h2><p><font size=4><strong>解题思路：</strong></font><br>遍历灯泡数组，从前往后翻转，如果前一状态与此时状态不同，则翻转灯泡。<br><font size=4><strong>代码展示：</strong></font></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minFlips</span><span class="params">(<span class="built_in">string</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> tmp[<span class="number">2</span>]=&#123;<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;target.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target[i]!=tmp[t])&#123;</span><br><span class="line">                ans++;</span><br><span class="line">                t=<span class="number">1</span>-t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="C-好叶子节点对的数量"><a href="#C-好叶子节点对的数量" class="headerlink" title="C.好叶子节点对的数量"></a>C.<a href="https://leetcode-cn.com/problems/number-of-good-leaf-nodes-pairs/">好叶子节点对的数量</a></h2><p><font size=4><strong>解题思路：</strong></font><br>后序遍历树，每个节点返回该节点的子树中距离该节点i长度的叶节点个数的vector数组。<br>答案计算在每个节点中，加上该节点左右子树叶节点距离&lt;=distance个数的乘积和。<br><font size=4><strong>代码展示：</strong></font></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> ans,d;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countPairs</span><span class="params">(TreeNode* root, <span class="keyword">int</span> distance)</span> </span>&#123;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        d=distance;</span><br><span class="line">        order(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">order</span><span class="params">(TreeNode *T)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(T==<span class="literal">NULL</span>)     <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (d+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;left==<span class="literal">NULL</span> &amp;&amp; T-&gt;right==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">q</span><span class="params">(d+<span class="number">1</span>)</span></span>;</span><br><span class="line">            q[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> q;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; le = order(T-&gt;left);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ri = order(T-&gt;right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=d;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">            le[i]=le[i<span class="number">-1</span>];</span><br><span class="line">            ri[i]=ri[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        le[<span class="number">0</span>]=ri[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=d;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=d;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i+j&lt;=d)  ans+=le[i]*ri[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=d;i++)</span><br><span class="line">            le[i]+=ri[i];</span><br><span class="line">        <span class="keyword">return</span> le;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><font size=5><strong>做题情况：</strong></font><br>AC 三题<br>排名：154 / 5231<br><font size=5><strong>总结反思：</strong></font><br>这次排名较高，第三题思路出的比较快，之前几次都要八百多名，继续努力，坚持每日一刷题，争取周赛能够AK。<br>第一次写博客，以后要多写博客，分享一些做题或者学习的情况与反思。</p>
]]></content>
      <categories>
        <category>Leetcode</category>
        <category>周赛</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
        <tag>深度优先遍历</tag>
      </tags>
  </entry>
  <entry>
    <title>【Leetcode】第200场周赛</title>
    <url>/2020/08/31/%E3%80%90Leetcode%E3%80%91%E7%AC%AC200%E5%9C%BA%E5%91%A8%E8%B5%9B/</url>
    <content><![CDATA[<h2 id="A-统计好三元组"><a href="#A-统计好三元组" class="headerlink" title="A.统计好三元组"></a>A.<a href="https://leetcode-cn.com/problems/count-good-triplets/">统计好三元组</a></h2><p><font size=4><strong>解题思路：</strong></font><br>三重遍历所有情况。判断三元组是否满足条件。<br><font size=4><strong>代码展示：</strong></font></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countGoodTriplets</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>,n=arr.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;n;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">fabs</span>(arr[i]-arr[j])&lt;=a &amp;&amp; <span class="built_in">fabs</span>(arr[j]-arr[k])&lt;=b&amp;&amp;<span class="built_in">fabs</span>(arr[k]-arr[i])&lt;=c)</span><br><span class="line">                        ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="B-找出数组游戏的赢家"><a href="#B-找出数组游戏的赢家" class="headerlink" title="B.找出数组游戏的赢家"></a>B.<a href="https://leetcode-cn.com/problems/find-the-winner-of-an-array-game/">找出数组游戏的赢家</a></h2><p><font size=4><strong>解题思路：</strong></font><br>将数组转换成链表，模拟游戏过程。<br><font size=4><strong>代码展示：</strong></font></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    node *next;</span><br><span class="line">    node(<span class="keyword">int</span> x)&#123;v=x;next=<span class="literal">nullptr</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getWinner</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=arr.size();</span><br><span class="line">        <span class="keyword">if</span>(k&gt;n)&#123;</span><br><span class="line">            <span class="keyword">int</span> maxv=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)    maxv=max(maxv,arr[i]);</span><br><span class="line">            <span class="keyword">return</span> maxv;</span><br><span class="line">        &#125;</span><br><span class="line">        node *root = <span class="keyword">new</span> node(arr[<span class="number">0</span>]);</span><br><span class="line">        node *p;p=root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            node *q = <span class="keyword">new</span> node(arr[i]);</span><br><span class="line">            p-&gt;next=q;</span><br><span class="line">            p=q;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t==k)&#123;</span><br><span class="line">                <span class="keyword">return</span> root-&gt;v;</span><br><span class="line">            &#125;</span><br><span class="line">            node *q=root-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;v &gt; q-&gt;v)&#123;</span><br><span class="line">                t++;</span><br><span class="line">                p-&gt;next = q;</span><br><span class="line">                root-&gt;next = q-&gt;next;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                t=<span class="number">1</span>;</span><br><span class="line">                p-&gt;next = root;</span><br><span class="line">                root = q;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="C-排布二进制网格的最少交换次数"><a href="#C-排布二进制网格的最少交换次数" class="headerlink" title="C.排布二进制网格的最少交换次数"></a>C.<a href="https://leetcode-cn.com/problems/minimum-swaps-to-arrange-a-binary-grid/">排布二进制网格的最少交换次数</a></h2><p><font size=4><strong>解题思路：</strong></font><br>统计每行末尾有几个0。从0行开始，判断每一行的尾0是否满足，不满足则从后面找到最先满足的一行一行交换上来，同时ans++。最后判断网格是否满足上三角，不满足输入-1，满足输出ans。<br><font size=4><strong>代码展示：</strong></font></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSwaps</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = grid.size();</span><br><span class="line">        <span class="comment">//cout&lt;&lt;n&lt;&lt;endl;</span></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">zenum</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=n<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j]==<span class="number">0</span>)   zenum[i]++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// for(int i=0;i&lt;n;i++) cout&lt;&lt;zenum[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(zenum[i]&gt;=n<span class="number">-1</span>-i) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(zenum[j]&gt;=n-i<span class="number">-1</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k!=i;k--)&#123;</span><br><span class="line">                        swap(zenum[k],zenum[k<span class="number">-1</span>]);</span><br><span class="line">                        ans++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(zenum[i]&lt;n<span class="number">-1</span>-i)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="D-最大得分"><a href="#D-最大得分" class="headerlink" title="D.最大得分"></a>D.<a href="https://leetcode-cn.com/problems/get-the-maximum-score/">最大得分</a></h2><p><font size=4><strong>解题思路：</strong></font><br>按数组建图，在图上dfs。<br><font size=4><strong>代码展示：</strong></font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define mymax(a,b)(a&gt;b?a:b)</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxn&#x3D;2e5+50;</span><br><span class="line">const int mod&#x3D;1e9+7;</span><br><span class="line"></span><br><span class="line">struct Edge&#123;</span><br><span class="line">    int to,next;</span><br><span class="line">&#125;edges[maxn&lt;&lt;2];</span><br><span class="line"></span><br><span class="line">int n,tot,head[maxn],w[maxn];</span><br><span class="line">ll dp[maxn];</span><br><span class="line"></span><br><span class="line">void addedge(int u,int v)&#123;</span><br><span class="line">    ++tot;</span><br><span class="line">    edges[tot].to&#x3D;v;</span><br><span class="line">    edges[tot].next&#x3D;head[u];</span><br><span class="line">    head[u]&#x3D;tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll dfs(int u)&#123;</span><br><span class="line">    if(dp[u]) return dp[u];</span><br><span class="line">    ll ans&#x3D;0;</span><br><span class="line">    for(int i&#x3D;head[u];i;i&#x3D;edges[i].next)&#123;</span><br><span class="line">        int v&#x3D;edges[i].to;</span><br><span class="line">        ans&#x3D;mymax(ans,dfs(v));</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[u]&#x3D;ans+w[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void init()&#123;</span><br><span class="line">    memset(edges,0, sizeof(edges));</span><br><span class="line">    memset(w,0,sizeof(w));</span><br><span class="line">    memset(dp,0,sizeof(dp));</span><br><span class="line">    memset(head,0,sizeof(head));</span><br><span class="line">    n&#x3D;tot&#x3D;0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int maxSum(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123;</span><br><span class="line">        init();</span><br><span class="line">        unordered_map&lt;int,int&gt; getid;</span><br><span class="line">        int cnt&#x3D;0;</span><br><span class="line">        for(int e:nums1)&#123;</span><br><span class="line">            if(!getid[e])&#123;</span><br><span class="line">                getid[e]&#x3D;++cnt;</span><br><span class="line">                w[cnt]&#x3D;e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int e:nums2)&#123;</span><br><span class="line">            if(!getid[e])&#123;</span><br><span class="line">                getid[e]&#x3D;++cnt;</span><br><span class="line">                w[cnt]&#x3D;e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        n&#x3D;cnt;</span><br><span class="line">        int len1&#x3D;nums1.size();</span><br><span class="line">        int len2&#x3D;nums2.size();</span><br><span class="line">        for(int i&#x3D;0;i+1&lt;len1;++i)&#123;</span><br><span class="line">            int u&#x3D;getid[nums1[i]],v&#x3D;getid[nums1[i+1]];</span><br><span class="line">            addedge(u,v);</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i&#x3D;0;i+1&lt;len2;++i)&#123;</span><br><span class="line">            int u&#x3D;getid[nums2[i]],v&#x3D;getid[nums2[i+1]];</span><br><span class="line">            addedge(u,v);</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans&#x3D;mymax(dfs(getid[nums1[0]]),dfs(getid[nums2[0]]));</span><br><span class="line">        return ans%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><font size=5><strong>做题情况：</strong></font><br>AC 三题<br>排名：154 / 5231<br><font size=5><strong>总结反思：</strong></font><br>这次排名较高，第三题思路出的比较快，之前几次都要八百多名，继续努力，坚持每日一刷题，争取周赛能够AK。<br>第一次写博客，以后要多写博客，分享一些做题或者学习的情况与反思。</p>
]]></content>
      <categories>
        <category>Leetcode</category>
        <category>周赛</category>
      </categories>
      <tags>
        <tag>深度优先遍历</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
</search>
